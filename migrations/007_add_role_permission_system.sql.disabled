-- migrations/007_add_role_permission_system.sql
-- Comprehensive Role-Based Access Control (RBAC) System

-- Create rbac schema
CREATE SCHEMA IF NOT EXISTS rbac;

-- Roles Definition
CREATE TABLE rbac.roles (
    role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_name VARCHAR(50) UNIQUE NOT NULL,
    role_slug VARCHAR(30) UNIQUE NOT NULL,
    display_name VARCHAR(100) NOT NULL,
    description TEXT,
    
    -- Role Type
    role_type VARCHAR(20) NOT NULL DEFAULT 'user', -- system, admin, user, custom
    
    -- Hierarchy
    parent_role_id UUID REFERENCES rbac.roles(role_id),
    hierarchy_level INTEGER NOT NULL DEFAULT 0,
    
    -- Access Control
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_system_role BOOLEAN NOT NULL DEFAULT FALSE, -- Cannot be deleted
    is_assignable BOOLEAN NOT NULL DEFAULT TRUE,  -- Can be assigned to users
    
    -- Metadata
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by UUID REFERENCES users.users(user_id)
);

-- Permissions Definition
CREATE TABLE rbac.permissions (
    permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    permission_name VARCHAR(100) UNIQUE NOT NULL,
    permission_slug VARCHAR(50) UNIQUE NOT NULL,
    display_name VARCHAR(100) NOT NULL,
    description TEXT,
    
    -- Permission Category
    category VARCHAR(50) NOT NULL, -- system, security, users, subscriptions, agents, secrets, audit
    resource_type VARCHAR(50), -- api_keys, agents, users, plans, etc.
    
    -- Action Types
    action VARCHAR(30) NOT NULL, -- create, read, update, delete, execute, admin
    
    -- Sensitivity Level
    sensitivity_level INTEGER NOT NULL DEFAULT 1, -- 1=low, 2=medium, 3=high, 4=critical
    
    -- Metadata
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Role-Permission Mapping
CREATE TABLE rbac.role_permissions (
    role_permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_id UUID NOT NULL REFERENCES rbac.roles(role_id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES rbac.permissions(permission_id) ON DELETE CASCADE,
    
    -- Grant Details
    granted_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    granted_by UUID REFERENCES users.users(user_id),
    expires_at TIMESTAMPTZ, -- Optional expiration
    
    UNIQUE(role_id, permission_id)
);

-- User-Role Assignment
CREATE TABLE rbac.user_roles (
    user_role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users.users(user_id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES rbac.roles(role_id) ON DELETE CASCADE,
    
    -- Assignment Details
    assigned_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    assigned_by UUID REFERENCES users.users(user_id),
    expires_at TIMESTAMPTZ, -- Optional expiration
    
    -- Assignment Context
    context VARCHAR(100), -- reason for assignment
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    
    UNIQUE(user_id, role_id)
);

-- Direct User Permissions (for exceptions)
CREATE TABLE rbac.user_permissions (
    user_permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users.users(user_id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES rbac.permissions(permission_id) ON DELETE CASCADE,
    
    -- Grant Type
    grant_type VARCHAR(20) NOT NULL DEFAULT 'allow', -- allow, deny
    
    -- Grant Details
    granted_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    granted_by UUID REFERENCES users.users(user_id),
    expires_at TIMESTAMPTZ,
    reason TEXT,
    
    UNIQUE(user_id, permission_id)
);

-- Session-based Role Switching
CREATE TABLE rbac.user_sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users.users(user_id) ON DELETE CASCADE,
    active_role_id UUID REFERENCES rbac.roles(role_id),
    
    -- Session Details
    session_token VARCHAR(255) UNIQUE NOT NULL,
    ip_address INET,
    user_agent TEXT,
    
    -- Timing
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    expires_at TIMESTAMPTZ NOT NULL,
    last_activity_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    
    -- Security
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    logout_reason VARCHAR(50), -- timeout, manual, force_logout, security
    
    INDEX (user_id, is_active),
    INDEX (session_token),
    INDEX (expires_at)
);

-- Insert System Roles
INSERT INTO rbac.roles (role_name, role_slug, display_name, description, role_type, hierarchy_level, is_system_role, is_assignable) VALUES
('System Administrator', 'system_admin', 'System Administrator', 'Full system access with all permissions', 'system', 100, TRUE, TRUE),
('Security Analyst', 'security_analyst', 'Security Analyst', 'Security monitoring and incident response', 'admin', 80, TRUE, TRUE),
('Admin', 'admin', 'Administrator', 'Administrative access to user and organization management', 'admin', 70, TRUE, TRUE),
('Manager', 'manager', 'Manager', 'Team management and oversight capabilities', 'user', 50, TRUE, TRUE),
('Power User', 'power_user', 'Power User', 'Advanced user with extended permissions', 'user', 30, TRUE, TRUE),
('User', 'user', 'Standard User', 'Standard user with basic access to their own resources', 'user', 10, TRUE, TRUE),
('Read Only', 'read_only', 'Read Only', 'View-only access to permitted resources', 'user', 5, TRUE, TRUE),
('Guest', 'guest', 'Guest', 'Limited access for temporary users', 'user', 1, TRUE, TRUE);

-- Insert Core Permissions
INSERT INTO rbac.permissions (permission_name, permission_slug, display_name, description, category, resource_type, action, sensitivity_level) VALUES
-- System Permissions
('system.admin', 'system_admin', 'System Administration', 'Full system administration access', 'system', 'system', 'admin', 4),
('system.config', 'system_config', 'System Configuration', 'Modify system-wide configuration', 'system', 'config', 'update', 3),
('system.maintenance', 'system_maintenance', 'System Maintenance', 'Perform system maintenance operations', 'system', 'system', 'execute', 3),

-- User Management
('users.create', 'users_create', 'Create Users', 'Create new user accounts', 'users', 'users', 'create', 2),
('users.read', 'users_read', 'View Users', 'View user information and profiles', 'users', 'users', 'read', 1),
('users.update', 'users_update', 'Update Users', 'Modify user accounts and profiles', 'users', 'users', 'update', 2),
('users.delete', 'users_delete', 'Delete Users', 'Delete user accounts', 'users', 'users', 'delete', 3),
('users.roles', 'users_roles', 'Manage User Roles', 'Assign and modify user roles', 'users', 'roles', 'admin', 3),

-- Security & Secrets
('secrets.read', 'secrets_read', 'View Secrets', 'View API keys and other secrets', 'security', 'secrets', 'read', 4),
('secrets.create', 'secrets_create', 'Create Secrets', 'Create new API keys and secrets', 'security', 'secrets', 'create', 3),
('secrets.update', 'secrets_update', 'Update Secrets', 'Modify or rotate secrets', 'security', 'secrets', 'update', 3),
('secrets.delete', 'secrets_delete', 'Delete Secrets', 'Delete API keys and secrets', 'security', 'secrets', 'delete', 4),

-- Agent Management
('agents.read', 'agents_read', 'View Agents', 'View agent information and status', 'agents', 'agents', 'read', 1),
('agents.create', 'agents_create', 'Register Agents', 'Register new agents', 'agents', 'agents', 'create', 2),
('agents.update', 'agents_update', 'Update Agents', 'Modify agent configuration', 'agents', 'agents', 'update', 2),
('agents.delete', 'agents_delete', 'Delete Agents', 'Remove agents from system', 'agents', 'agents', 'delete', 3),
('agents.control', 'agents_control', 'Control Agents', 'Send commands to agents', 'agents', 'agents', 'execute', 3),

-- Subscription Management
('subscriptions.read', 'subscriptions_read', 'View Subscriptions', 'View subscription plans and usage', 'subscriptions', 'plans', 'read', 1),
('subscriptions.create', 'subscriptions_create', 'Create Plans', 'Create new subscription plans', 'subscriptions', 'plans', 'create', 3),
('subscriptions.update', 'subscriptions_update', 'Update Plans', 'Modify subscription plans', 'subscriptions', 'plans', 'update', 3),
('subscriptions.delete', 'subscriptions_delete', 'Delete Plans', 'Delete subscription plans', 'subscriptions', 'plans', 'delete', 3),
('subscriptions.migrate', 'subscriptions_migrate', 'Migrate Users', 'Move users between subscription plans', 'subscriptions', 'users', 'update', 3),

-- Security Monitoring
('security.incidents', 'security_incidents', 'Security Incidents', 'View and manage security incidents', 'security', 'incidents', 'admin', 3),
('security.monitoring', 'security_monitoring', 'Security Monitoring', 'Access security monitoring dashboards', 'security', 'monitoring', 'read', 2),
('security.response', 'security_response', 'Security Response', 'Respond to security incidents', 'security', 'incidents', 'execute', 3),

-- Audit & Compliance
('audit.read', 'audit_read', 'View Audit Logs', 'Access audit logs and compliance reports', 'audit', 'logs', 'read', 2),
('audit.export', 'audit_export', 'Export Audit Data', 'Export audit logs and reports', 'audit', 'logs', 'execute', 3),

-- Dashboard & Analytics
('dashboard.admin', 'dashboard_admin', 'Admin Dashboard', 'Access administrative dashboards', 'dashboard', 'admin', 'read', 2),
('dashboard.analytics', 'dashboard_analytics', 'Analytics Dashboard', 'Access analytics and reporting', 'dashboard', 'analytics', 'read', 1),

-- API Access
('api.read', 'api_read', 'API Read Access', 'Read-only API access', 'api', 'api', 'read', 1),
('api.write', 'api_write', 'API Write Access', 'Write API access', 'api', 'api', 'update', 2),
('api.admin', 'api_admin', 'API Admin Access', 'Full API administrative access', 'api', 'api', 'admin', 3);

-- Assign Permissions to System Roles
-- System Administrator gets everything
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'system_admin'),
    permission_id,
    NULL
FROM rbac.permissions;

-- Security Analyst permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'security_analyst'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'users_read', 'agents_read', 'agents_control', 'security_incidents',
    'security_monitoring', 'security_response', 'audit_read', 'dashboard_analytics',
    'api_read', 'api_write'
);

-- Admin permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'admin'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'users_create', 'users_read', 'users_update', 'users_roles',
    'agents_read', 'agents_create', 'agents_update', 'agents_delete',
    'subscriptions_read', 'subscriptions_update', 'subscriptions_migrate',
    'dashboard_admin', 'dashboard_analytics', 'api_read', 'api_write'
);

-- Manager permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'manager'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'users_read', 'users_update', 'agents_read', 'agents_update',
    'subscriptions_read', 'dashboard_analytics', 'api_read'
);

-- Power User permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'power_user'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'users_read', 'agents_read', 'agents_create', 'agents_update',
    'subscriptions_read', 'dashboard_analytics', 'api_read', 'api_write'
);

-- Standard User permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'user'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'agents_read', 'agents_create', 'dashboard_analytics', 'api_read'
);

-- Read Only permissions
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'read_only'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'users_read', 'agents_read', 'subscriptions_read', 'dashboard_analytics'
);

-- Guest permissions (minimal)
INSERT INTO rbac.role_permissions (role_id, permission_id, granted_by)
SELECT 
    (SELECT role_id FROM rbac.roles WHERE role_slug = 'guest'),
    permission_id,
    NULL
FROM rbac.permissions 
WHERE permission_slug IN (
    'dashboard_analytics'
);

-- Add role column to users table
ALTER TABLE users.users ADD COLUMN primary_role_id UUID REFERENCES rbac.roles(role_id);

-- Set default role for existing users
UPDATE users.users SET primary_role_id = (
    SELECT role_id FROM rbac.roles WHERE role_slug = 'user'
) WHERE primary_role_id IS NULL;

-- Assign default role to all existing users
INSERT INTO rbac.user_roles (user_id, role_id, assigned_by, context)
SELECT 
    u.user_id,
    r.role_id,
    NULL,
    'Initial role assignment'
FROM users.users u
CROSS JOIN rbac.roles r
WHERE r.role_slug = 'user'
AND NOT EXISTS (
    SELECT 1 FROM rbac.user_roles ur 
    WHERE ur.user_id = u.user_id
);

-- Create Indexes
CREATE INDEX idx_role_permissions_role ON rbac.role_permissions(role_id);
CREATE INDEX idx_role_permissions_permission ON rbac.role_permissions(permission_id);
CREATE INDEX idx_user_roles_user ON rbac.user_roles(user_id, is_active);
CREATE INDEX idx_user_roles_role ON rbac.user_roles(role_id, is_active);
CREATE INDEX idx_user_permissions_user ON rbac.user_permissions(user_id);
CREATE INDEX idx_permissions_category ON rbac.permissions(category);
CREATE INDEX idx_permissions_resource ON rbac.permissions(resource_type);
CREATE INDEX idx_permissions_sensitivity ON rbac.permissions(sensitivity_level);
CREATE INDEX idx_roles_hierarchy ON rbac.roles(hierarchy_level);
CREATE INDEX idx_roles_active ON rbac.roles(is_active) WHERE is_active = TRUE;

-- Helper Views
CREATE VIEW rbac.user_effective_permissions AS
SELECT DISTINCT
    ur.user_id,
    p.permission_id,
    p.permission_name,
    p.permission_slug,
    p.category,
    p.resource_type,
    p.action,
    p.sensitivity_level,
    'role' as source,
    r.role_name as source_name
FROM rbac.user_roles ur
JOIN rbac.roles r ON ur.role_id = r.role_id
JOIN rbac.role_permissions rp ON r.role_id = rp.role_id
JOIN rbac.permissions p ON rp.permission_id = p.permission_id
WHERE ur.is_active = TRUE 
AND r.is_active = TRUE 
AND p.is_active = TRUE
AND (ur.expires_at IS NULL OR ur.expires_at > now())
AND (rp.expires_at IS NULL OR rp.expires_at > now())

UNION ALL

SELECT 
    up.user_id,
    p.permission_id,
    p.permission_name,
    p.permission_slug,
    p.category,
    p.resource_type,
    p.action,
    p.sensitivity_level,
    'direct' as source,
    'Direct Grant' as source_name
FROM rbac.user_permissions up
JOIN rbac.permissions p ON up.permission_id = p.permission_id
WHERE up.grant_type = 'allow'
AND p.is_active = TRUE
AND (up.expires_at IS NULL OR up.expires_at > now());

CREATE VIEW rbac.user_role_summary AS
SELECT 
    u.user_id,
    u.username,
    u.email,
    r.role_name as primary_role,
    r.display_name as primary_role_display,
    r.hierarchy_level,
    array_agg(DISTINCT ar.role_name ORDER BY ar.hierarchy_level DESC) as all_roles,
    array_agg(DISTINCT p.category ORDER BY p.category) as permission_categories,
    COUNT(DISTINCT p.permission_id) as total_permissions,
    COUNT(DISTINCT CASE WHEN p.sensitivity_level >= 3 THEN p.permission_id END) as high_sensitivity_permissions
FROM users.users u
LEFT JOIN rbac.roles r ON u.primary_role_id = r.role_id
LEFT JOIN rbac.user_roles ur ON u.user_id = ur.user_id AND ur.is_active = TRUE
LEFT JOIN rbac.roles ar ON ur.role_id = ar.role_id AND ar.is_active = TRUE
LEFT JOIN rbac.user_effective_permissions p ON u.user_id = p.user_id
GROUP BY u.user_id, u.username, u.email, r.role_name, r.display_name, r.hierarchy_level;

-- Function to check user permission
CREATE OR REPLACE FUNCTION rbac.user_has_permission(
    p_user_id UUID,
    p_permission_slug VARCHAR(50)
) RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM rbac.user_effective_permissions uep
        WHERE uep.user_id = p_user_id 
        AND uep.permission_slug = p_permission_slug
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get user permissions by category
CREATE OR REPLACE FUNCTION rbac.get_user_permissions_by_category(
    p_user_id UUID,
    p_category VARCHAR(50) DEFAULT NULL
) RETURNS TABLE (
    permission_slug VARCHAR(50),
    permission_name VARCHAR(100),
    action VARCHAR(30),
    sensitivity_level INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        uep.permission_slug,
        uep.permission_name,
        uep.action,
        uep.sensitivity_level
    FROM rbac.user_effective_permissions uep
    WHERE uep.user_id = p_user_id
    AND (p_category IS NULL OR uep.category = p_category)
    ORDER BY uep.sensitivity_level DESC, uep.permission_name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;